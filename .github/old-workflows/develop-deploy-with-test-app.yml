name: "deploy to develop"

on:
  pull_request:
    branches:
      - develop
    types: [opened, synchronize]
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write
  #issues: write

env:
  # verbosity setting for Terraform logs--test
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  S3_BUCKET_TF_STATE: "develop-test-llm-terraform-state"
  TF_STATE_FILE: "vpc-eks.tfstate"
  TF_STATE_FILE_APP: "app.tfstate"
  AWS_REGION: "us-east-1"
  TERRAFORM_VERSION: "1.7.0"
  # https://docs.nginx.com/nginx-ingress-controller/technical-specifications/#supported-kubernetes-versions
  NGINX_INGRESS_CONTROLLER_CHART_VERSION: "1.0.2"
  ENVIRONMENT: develop
  EKS_CLUSTER_NAME: develop-eks-cluster
  WEAVIATE_NAMESPACE: "weaviate"
  WEAVIATE_CHART_VERSION: "16.8.1"
  WEAVIATE_APP_VERSION: "1.23.7"

jobs:
  deploy_vpc_and_eks:
    name: "Deploy VPC and EKS cluster"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    defaults:
      run:
        working-directory: terraform-code/vpc-eks
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: $TERRAFORM_VERSION
      
      - name: Install checkov
        run: pip install checkov    

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config "bucket=$S3_BUCKET_TF_STATE" \
            -backend-config "key=$TF_STATE_FILE"

      - name: Terraform Validate
        run: terraform validate -no-color
      
      - name: Fetch variable file infra.tfvars from CONFIG REPO
        uses: actions/checkout@v2
        with:
          repository: "luisllm/environments"
          ref: develop # or specify the branch, tag, or commit hash where the file resides
          path: "./environments"
      
      - name: Print variable file infra.tfvars coming from CONFIG REPO
        run: cat ../../environments/tf-config/infra.tfvars

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -var-file="../../environments/tf-config/infra.tfvars" -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Run checkov
        run: checkov -d . --quiet --soft-fail

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # Notify to Slack channel if it fails
      #- name: Notify slack fail
      #    if: failure()
      #    env:
      #      SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
      #    uses: voxmedia/github-action-slack-notify-build@v1
      #    with:
      #      channel: app-alerts
      #      status: FAILED
      #      color: danger


  ingress_deployment:
    name: "Deploy nginx ingress controller in EKS"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [deploy_vpc_and_eks]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Deploy nginx ingress controller
        run: |
          helm upgrade --install public-ingress oci://ghcr.io/nginxinc/charts/nginx-ingress --version $NGINX_INGRESS_CONTROLLER_CHART_VERSION


  # Store in AWS ParameterStore the public LB dns name created automatically when the nginx ingress controller was deployed. It will be used to send requests
  public_ingress_lb_discovery:
    name: "Store ingress AWS public LB dns name in AWS ParameterStore"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [ingress_deployment]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Discover ingress public LB DNS Name and store it in AWS ParameterStore
        id: discover-lb-dns
        run: |
          # Get the list of load balancer names
          load_balancer_names=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[].LoadBalancerName" --output text)
          
          # Iterate over each load balancer name
          for lb_name in $load_balancer_names; do
              # Retrieve tags for the current load balancer
              tags=$(aws elb describe-tags --load-balancer-names "$lb_name" --query "TagDescriptions[].Tags[?Key=='kubernetes.io/cluster/$EKS_CLUSTER_NAME'].Value" --output text)
              
              # Check if the load balancer has the desired tag
              if [ ! -z "$tags" ]; then
                  # If the tag is found, print the DNS name of the load balancer
                  ingress_lb_dns_name=$(aws elb describe-load-balancers --load-balancer-names "$lb_name" --query "LoadBalancerDescriptions[].DNSName" --output text)
                  echo "$ingress_lb_dns_name"
                  aws ssm put-parameter --name "/$ENVIRONMENT/ingress-public-load-balancer-dns" --value "$ingress_lb_dns_name" --type String --overwrite
              fi
          done
          



  app_deployment:
    name: "Deploy Test App with Terraform"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [ingress_deployment]
    defaults:
      run:
        working-directory: terraform-code/platform-deployments/deploy-app
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: $TERRAFORM_VERSION

      - name: Terraform Format
        run: terraform fmt
  
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config "bucket=$S3_BUCKET_TF_STATE" \
            -backend-config "key=$TF_STATE_FILE_APP"

      - name: Terraform Validate
        run: terraform validate -no-color
        
      - name: Fetch variable file infra.tfvars from CONFIG REPO
        uses: actions/checkout@v2
        with:
          repository: "luisllm/environments"
          ref: develop # or specify the branch, tag, or commit hash where the file resides
          path: "./environments"

      - name: Print variable file infra.tfvars coming from CONFIG REPO
        run: cat ../../../environments/tf-config/infra.tfvars

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -var-file="../../../environments/tf-config/infra.tfvars" -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
      
      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan



  test_infra:
    name: "Test App with external request"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [public_ingress_lb_discovery, app_deployment]
    outputs:
      infra_test_status: ${{ steps.send_test_request.outputs.infra_test_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # Get from AWS ParameterStore the public LB dns name created automatically when the nginx ingress controller was deployed. It will be used to send requests
      - name: Get AWS public LB DNS Name from ParameterStore
        id: discover-lb-dns
        run: |
          ingress_lb_dns=$(aws ssm get-parameter --name "/$ENVIRONMENT/ingress-public-load-balancer-dns" --query 'Parameter.Value' --output text)
          echo "INGRESS_LB_DNS=$ingress_lb_dns" >>$GITHUB_ENV

      - name: Send test request
        id: send_test_request
        run: |
          response_http_status_code=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://$INGRESS_LB_DNS:80 --header 'Host: test.example.com')
          echo "response_http_status: $response_http_status_code"
          if [ "$response_http_status_code" -eq "200" ]; then
            echo "::set-output name=infra_test_status::OK"
          else
            echo "::set-output name=infra_test_status::NOK"
          fi


  # https://weaviate.io/developers/weaviate/installation/kubernetes
  # https://weaviate.github.io/weaviate-helm/
  weaviate_helm_deploy:
    name: "Deploy Weaviate with Helm"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [ingress_deployment] 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Fetch values.yaml from CONFIG REPO
        uses: actions/checkout@v2
        with:
          repository: "luisllm/environments"
          ref: develop # or specify the branch, tag, or commit hash where the file resides
          path: "./environments"
      
      - name: Print values.yaml coming from CONFIG REPO
        run: cat ./environments/app-config/weaviate/values.yaml

      # Get from AWS ParameterStore the SecGroup ID that should be attached to the public AWS LB
      # The SecGroup was created by Terraform
      - name: Get SecGroup from ParameterStore
        id: discover-lb-secgroup
        run: |
          secgroup_id=$(aws ssm get-parameter --name "/$ENVIRONMENT/public-lb-secgroup-id" --query 'Parameter.Value' --output text)
          echo "SECGROUP_ID=$secgroup_id" >>$GITHUB_ENV

      - name: Customize values.yaml with the SecGroup ID
        run: sed "s/secgroup_id_to_change/$SECGROUP_ID/g" ./environments/app-config/weaviate/values.yaml > ./environments/app-config/weaviate/customized-values.yaml

      - name: Print customized values.yaml
        run: cat ./environments/app-config/weaviate/customized-values.yaml

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
  
      - name: Add the Weaviate helm repo that contains the Weaviate helm chart
        run: helm repo add weaviate https://weaviate.github.io/weaviate-helm

      - name: Create weaviate namespace
        run: |
          weaviate_namespace=$WEAVIATE_NAMESPACE
          kubectl get namespace | grep -q "^$weaviate_namespace " || kubectl create namespace $weaviate_namespace   

      - name: Helm install 
        run: |
          helm upgrade --install \
            "weaviate" \
            weaviate/weaviate \
            --version $WEAVIATE_CHART_VERSION \
            --namespace $WEAVIATE_NAMESPACE
            --values ./environments/app-config/weaviate/customized-values.yaml \
            --set "image.tag=$WEAVIATE_APP_VERSION"

  # Store in AWS ParameterStore the public weaviate LB dns name created automatically when weaviate was deployed. It will be used to send requests
  public_weaviate_lb_discovery:
    name: "Store weaviate AWS public LB dns name in AWS ParameterStore"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [weaviate_helm_deploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Discover weaviate public LB DNS Name and store it in AWS ParameterStore
        id: discover-weaviate-lb-dns
        run: |
          # Get the list of load balancer names
          load_balancer_names=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[].LoadBalancerName" --output text)
          
          # Iterate over each load balancer name
          for lb_name in $load_balancer_names; do
              # Retrieve tags for the current load balancer
              tags=$(aws elb describe-tags --load-balancer-names "$lb_name" --query "TagDescriptions[].Tags[?Value=='weaviate/weaviate'].Value" --output text)

              # Check if the load balancer has the desired tag
              if [ ! -z "$tags" ]; then
                  # If the tag is found, print the DNS name of the load balancer
                  public_weaviate_load_balancer_dns=$(aws elb describe-load-balancers --load-balancer-names "$lb_name" --query "LoadBalancerDescriptions[].DNSName" --output text)
                  aws ssm put-parameter --name "/$ENVIRONMENT/weaviate-public-load-balancer-dns" --value "$public_weaviate_load_balancer_dns" --type String --overwrite
              fi
          done




  test_weaviate:
    name: "Test weaviate App with external request"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [weaviate_helm_deploy, public_weaviate_lb_discovery]
    outputs:
      infra_test_status: ${{ steps.send_test_request.outputs.infra_test_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # Wait for 1min for the LB to get created
      - name: Wait for 1 Minute
        run: sleep 60

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Check all weaviate PODs are running
        id: check_weaviate_pods
        run: |
          kubectl get pods -n $WEAVIATE_NAMESPACE -l app=weaviate -o jsonpath='{range .items[*]}{.status.phase}{"\n"}{end}' | grep -qv "Running" && echo "One or more pods are not in running state" && exit 1 || echo "All pods are running"

      # Get from AWS ParameterStore the public LB dns name created automatically when the nginx ingress controller was deployed. It will be used to send requests
      - name: Get AWS public LB DNS Name from ParameterStore
        id: discover-lb-dns
        run: |
          weaviate_lb_dns=$(aws ssm get-parameter --name "/$ENVIRONMENT/weaviate-public-load-balancer-dns" --query 'Parameter.Value' --output text)
          echo "WEAVIATE_LB_DNS=$weaviate_lb_dns" >>$GITHUB_ENV

      - name: Send test request
        id: send_test_request
        run: |
          response_http_status_code=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://$WEAVIATE_LB_DNS:80)
          echo "response_http_status: $response_http_status_code"
          if [ "$response_http_status_code" -eq "200" ]; then
            echo "::set-output name=infra_test_status::OK"
          else
            echo "::set-output name=infra_test_status::NOK"
          fi


  deploy_monitoring:
    name: "Deploy monitoring"
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [weaviate_helm_deploy, public_weaviate_lb_discovery]
    defaults:
      run:
        working-directory: monitoring
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Create monitoring namespace
        run: |
          kubectl get namespace | grep -q "^monitoring" || kubectl create namespace monitoring  

      - name: print custom values
        run: |
          cat custom-values.yaml

      - name: Deploy Prometheus and Grafana with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install \
            "mon" \
            prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values custom-values.yaml